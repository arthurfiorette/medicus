const fs = require('node:fs');
const path = require('node:path');

const root = path.resolve(__dirname, '..');
const integrationsFolder = path.resolve(root, 'src/integrations');
const npmignorePath = path.resolve(root, '.npmignore');
const distIndexDts = path.resolve(root, 'dist/index.d.ts');

const files = fs.readdirSync(integrationsFolder);

const exportedFiles = [];

// writes X.js and X.d.ts files
for (const file of files) {
  const pathWithoutExt = path.parse(file).name;

  const jsFilename = `${pathWithoutExt}.js`;
  const js = `module.exports = require('./dist/integrations/${pathWithoutExt}.js');`;

  const dtsFilename = `${pathWithoutExt}.d.ts`;
  const dts = `export * from './dist/integrations/${pathWithoutExt}';`;

  fs.writeFileSync(path.resolve(root, jsFilename), js, 'utf8');
  fs.writeFileSync(path.resolve(root, dtsFilename), dts, 'utf8');

  exportedFiles.push(jsFilename, dtsFilename);
}

const npmignore = `

# white list approach

*

# Allowed files

!LICENSE
!README.md

# Allowed folders

!dist/**

# Re-exported files (generated by the build process)

${exportedFiles.map((file) => `!${file}`).join('\n')}

`.trim();

fs.writeFileSync(npmignorePath, npmignore, 'utf8');

// type references for intellisense
const key = '// Auto generated references';

const content = fs.readFileSync(distIndexDts, 'utf8');

if (!content.startsWith(key)) {
  const references = exportedFiles
    .filter((files) => files.endsWith('d.ts'))
    .map((f) => `/// <reference path="../${f}" />`)
    .join('\n');

  fs.writeFileSync(
    distIndexDts,
    `${key}\n${references}\n${key}\n\n${fs.readFileSync(distIndexDts, 'utf8')}`,
    'utf8'
  );
}
